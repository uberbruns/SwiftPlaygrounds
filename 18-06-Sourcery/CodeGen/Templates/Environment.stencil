{% for class in types.classes where class|annotated:"environment" %}
// sourcery:inline:{{ class.name }}.Environment.Properties
    typealias EnvironmentProtocol = {{ class.name }}EnvironmentProtocol

    private let env: AnyEnvironment
{% for property in class.containedType.Environment.cases %}
    private let {{ property.name }}: {{ property.associatedValues.first.typeName }}
{% endfor %}
// sourcery:end

// sourcery:inline:{{ class.name }}.Environment.ConvenienceInit
    convenience init(env: AnyEnvironment{% for parameter in class.initializers.first.parameters where parameter.name != "env" %}, {% if parameter.argumentLabel == nil %}_ {% elif parameter.name != parameter.argumentLabel %}{{ parameter.argumentLabel }} {% endif %}{{ parameter.name }}: {{ parameter.typeName }}{% endfor %}) throws {
        if let env = env as? EnvironmentProtocol {
            self.init(env: env{% for parameter in class.initializers.first.parameters where parameter.name != "env" %}, {% if parameter.argumentLabel %}{{ parameter.argumentLabel }}: {% endif %}{{ parameter.name }}{% endfor %})
        } else {
            throw EnvironmentError()
        }
    }
// sourcery:end

// sourcery:inline:{{ class.name }}.Environment.Init
{% for property in class.containedType.Environment.cases %}
        self.{{ property.name }} = env.{{ property.name }}
{% endfor %}
        self.env = env
// sourcery:end

// sourcery:inline:{{ class.name }}.Environment.Protocol
protocol {{ class.name }}EnvironmentProtocol: AnyEnvironment {
{% for property in class.containedType.Environment.cases %}
    var {{ property.name }}: {{ property.associatedValues.first.typeName }} { get }
{% endfor %}
}

struct {{ class.name }}Environment: {{ class.name }}EnvironmentProtocol {
{% for property in class.containedType.Environment.cases %}
    let {{ property.name }}: {{ property.associatedValues.first.typeName }}
{% endfor %}
}

// sourcery:end
{% endfor %}


// sourcery:inline:Setup.Environment
protocol AnyEnvironment { }

struct EnvironmentError: Error { }

// sourcery:end


// sourcery:inline:Global.Environment
    AnyEnvironment,
{% for class in types.classes where class|annotated:"environment" %}
    {{ class.name }}EnvironmentProtocol{% if not forloop.last %},{% else %}{{ " {" }}{% endif %}
{% endfor %}
// sourcery:end
